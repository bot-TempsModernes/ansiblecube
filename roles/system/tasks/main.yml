---
- include_vars: group_vars/{{ ansible_architecture }}.yml
  tags: ['master', 'custom']

- name: Generate a random number for the idc_uniq_device_name
  set_fact: idc_uniq_device_name="{{ ideascube_project_name }}_{{ 1000 | random }}"
    generic_project_name={{ ideascube_project_name |replace("_", "-") }}
  tags: ['master', 'custom']

- name: Register if the device is managed by BSF or not
  ini_file: dest=/etc/ansible/facts.d/installed_software.fact
    section=management
    option=managed_by_bsf
    value={{ managed_by_bsf }}
  tags:
    - custom

- name: A way to get the public IP of the device
  shell: wget -qO- http://ipecho.net/plain ; echo
  register: public_ip
  tags:
    - custom

- name: Write all the variables in /etc/firstStart.csv
  copy: content=id,{{ ansible_date_time["date"] }},{{ ansible_date_time["time"] }},{{ idc_uniq_device_name }},{{ ansible_machine_id }},{{ ansible_default_ipv4["macaddress"] }},{{ ansible_default_ipv4["address"] }},{{ public_ip.stdout }}\n dest=/etc/firstStart.csv
  tags:
    - custom

- name: Send this file over the central_server
  raw: cat /etc/firstStart.csv | ssh -p 443 {{ central_server }} "cat >> ./ansible/UUID/firstStart.csv"
  when: managed_by_bsf|bool
  tags:
    - custom

- name: Add non free repository
  replace: dest=/etc/apt/sources.list
    regexp='jessie main' 
    replace='jessie main non-free'
  tags:
    - master

- name: Remove line cdrom in source.list
  lineinfile: dest=/etc/apt/sources.list regexp='cdrom:' state=absent
  tags: 
    - master

- name: Remove unwanted packages before upgrading
  apt: name={{ item }} state=absent purge=yes
  with_items:
   - apache2
   - apache2-mpm-worker
   - apache2-utils
   - apache2.2-bin
   - apache2.2-common
   - btrfs-tools
   - figlet
   - toilet
   - bluez
   - fping
   - stress
   - iperf
   - iotop
   - lirc
   - apt-listchanges
  tags:
    - master

- name: Install all requiered package
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
   - python-pip
   - python-dev
   - python-setuptools
   - git
   - sudo
   - lsb-release
   - vim
   - locate
   - git
   - unzip
   - bash-completion
   - aptitude
   - ntpdate
   - fake-hwclock
   - hdparm
   - ncurses-term
   - libffi-dev
   - libssl-dev
   - tree
   - screen
  tags:
    - master

- name: Check for Realtek Wireless Network Adapter
  shell: "lspci | grep -F 'Network controller: Realtek Semiconductor'"
  ignore_errors: yes
  register: lspci_realtek
  tags: ['master', 'custom']

- include: realtek.yml
  when: lspci_realtek.stdout != ""
  tags: ['master', 'custom']

- name: Check for Ralink Wireless Network Adapter
  shell: "lspci | grep -F 'Ralink'"
  ignore_errors: yes
  register: lspci_ralink
  tags: ['master', 'custom']

- include: ralink.yml
  when: lspci_ralink.stdout != ""
  tags: ['master', 'custom']

- name: List services to restart (1/2)
  shell: checkrestart | grep ^service | awk '{print $2}'
  register: services
  changed_when: False
  tags:
    - master

- name: Install ansible
  pip: name={{ item }}
  with_items:
    - ansible
    - markupsafe
  tags:
    - master

- name: Upgrade packages
  apt: upgrade=safe
  tags:
    - master

# https://github.com/ansible/ansible/issues/16015
- name: Fix a bug on Exception setuptools 3.6
  command: pip install -U distribute
  tags:
    - master

- name: Add domain name for loopback interface
  lineinfile: dest=/etc/hosts
    regexp='localhost'
    insertafter='localhost'
    line='127.0.0.1 localhost {{ idc_uniq_device_name |replace("_", "-") }}.lan {{ hostname }}'
  tags: ['master', 'custom']

- name: Add domain name for hotspot interface
  lineinfile: dest=/etc/hosts
    regexp='^'
    line='{{hotspotip}} {{ idc_uniq_device_name |replace("_", "-") }}.lan {{ hostname }}
    state=present
  tags: ['master', 'custom']

- name: An hostname can not have _ so we are switching to -, python can not have - so using _ sometime too
  hostname: name={{ idc_uniq_device_name |replace("_", "-") }}
  tags: ['master', 'custom']

- name: Create an ideascube user on the system
  user: name={{ username }}
        shell=/bin/bash
        groups="sudo,www-data"
        home="/home/{{ username }}"
        generate_ssh_key=yes
        ssh_key_bits=2048
        ssh_key_file=.ssh/id_rsa
        password={{ password }}
  tags:
    - master

- name: Add locale fr_FR
  locale_gen: name=fr_FR.UTF-8 state=present
  tags:
    - master

- name: Add locale en_US
  locale_gen: name=en_US.UTF-8 state=present
  tags:
    - master

- name: Add locale en_GB
  locale_gen: name=en_GB.UTF-8 state=present
  tags:
    - master

- name: Copy a blank rc.local
  copy: src=rc.local dest=/etc/rc.local owner=root group=root mode=0644 backup=yes
  tags:
    - master

- name: Copy .bashrc for root
  copy: src=bashrc dest=/root/.bashrc owner=root
  tags:
    - master

- name: Copy the global vimrc file
  copy: src=vimrc.local dest=/etc/vim/vimrc.local owner=root mode=0644
  tags:
    - master

- name: Copy .bashrc for new username
  copy: src=bashrc dest=/home/{{ username }}/.bashrc owner={{ username }}
  tags:
    - master

- name: Copy visudo file for ideascube user
  template: src=visudo.j2 dest=/etc/sudoers.d/shutdown
    owner=root group=root mode=0440 validate="/usr/sbin/visudo -cf %s"
  tags:
    - master

- name: Create local directory to work from
  file: path=/var/lib/ansible/local state=directory owner=root group=root mode=0751
  tags:
    - master

- name: Create ansible hosts directory to work from
  file: path=/etc/ansible/ state=directory owner=root group=root mode=0751
  tags:
    - master

- name: Copy ansible inventory file to client
  copy: src=hosts dest=/etc/ansible/hosts
          owner=root group=root mode=0644
  tags:
    - master

- name: Remove the existing localtime file
  file: path=/etc/localtime state=absent
  tags:
    - custom

- name: Set a new localtime file corresponding to the timezone
  file: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime state=link force=yes
  tags:
    - custom

- name: Set timezone variables
  copy: content={{ timezone }} dest=/etc/timezone owner=root group=root mode=0644 backup=yes
  notify: update timezone
  tags:
    - custom

- name: Test if a fex file exist, if yes, the device is an Olimex
  stat: path=/boot/bin/lime2.bin
  register: fex_file
  tags:
    - custom

- include: lime2.yml
  when: fex_file.stat.exists is defined and fex_file.stat.exists
  tags:
    - custom