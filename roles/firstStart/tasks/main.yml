---
- stat: path=/etc/firstStart.csv
  register: st

- set_fact: date="{{ ansible_date_time["date"]}}" time="{{ ansible_date_time["time"]}}"

- set_fact: ideascubeName="{{ ideascube_id }}_{{ 1000 | random }}" UUID="{{ ansible_default_ipv4["macaddress"] | hash('md5') }}"
  when: st.stat.exists == False

- hostname: name={{ ideascubeName |replace("_", "-") }}
  when: st.stat.exists == False

- lineinfile: dest=/etc/hosts regexp='^127.0.0.1' insertafter='127.0.0.1' line='127.0.0.1 localhost localhost.localdomain' owner=root group=root mode=0644
  when: st.stat.exists == False

- lineinfile: dest=/etc/hosts regexp='^{{ hotspotip }}' insertafter='{{ hotspotip }}' line='{{ hotspotip }} {{ ideascubeName }} {{ ideascubeName |replace("_", "-") }}.lan {{ hostname }} {{ mook_front_server_name }}' owner=root group=root mode=0644
  when: st.stat.exists == False

- shell: wget -qO- http://ipecho.net/plain ; echo
  register: public_ip
  when: st.stat.exists == False

- stat: path=/media/hdd/ubuntudoc_fr_2009-01.zim
  when: ansible_architecture == "armhf" or ansible_architecture == "armv7l"
  register: p

- set_fact: hdd_access="0"
  when: p.stat.isdir is not defined and st.stat.exists == False and (ansible_architecture == "armhf" or ansible_architecture == "armv7l")

- set_fact: hdd_access="1"
  when: p.stat.isdir is defined and st.stat.exists == False and (ansible_architecture == "armhf" or ansible_architecture == "armv7l")

- copy: content=id,{{ date }},{{ time }},{{ ideascubeName }},{{ UUID }},{{hdd_access}},{{ ansible_default_ipv4["macaddress"] }},{{ ansible_default_ipv4["address"] }},{{ public_ip.stdout }}\n dest=/etc/firstStart.csv
  when: st.stat.exists == False

- raw: cat /etc/firstStart.csv | ssh -p 443 {{ central_server }} "cat >> ./ansible/UUID/firstStart.csv"
  when: st.stat.exists == False

# - lineinfile: dest=/etc/network/interfaces regexp='wpa' state=absent
#   when: st.stat.exists == False

- file: path=/etc/localtime state=absent
  when: st.stat.exists == False

- name: set /etc/localtime
  file: src=/usr/share/zoneinfo/{{ timezone }} dest=/etc/localtime state=link
  when: st.stat.exists == False

- name: Set timezone variables
  copy: content={{ timezone }} dest=/etc/timezone owner=root group=root mode=0644 backup=yes
  notify: update timezone
  when: st.stat.exists == False

- name: Set ansible pull for the right project
  replace: dest=/etc/dhcp/dhclient-exit-hooks.d/ansiblePullUpdate regexp='initPullUpdate.yml' replace='update_{{ ideascube_id }}.yml'
  when: st.stat.exists == False
  ignore_errors: yes

- stat: path={{ mook_path }}/bsfcampus/api/settings_local.py
  register: mook

# Hardcoded, TODO switch to dynamic !! 
- name: add conf for Mook
  lineinfile: dest={{ mook_path }}/bsfcampus/api/settings_local.py regexp='' insertafter=EOF line='    CENTRAL_SERVER_KEY = \"{{ideascubeName}}\" \n    CENTRAL_SERVER_SECRET = \"{{UUID}}\"' owner={{username}} group={{username}} mode=755
  when: st.stat.exists == False and mook.stat.exists == True

- file: path=/media/hdd/mongodb/ state=absent

- file: path=/media/hdd/ideascube/ state=absent

- name: Create data directory
  file: path=/media/hdd/mongodb state=directory mode=0755 owner=mongodb group=nogroup

- file: src=/media/hdd/khanVideos/content/ dest=/home/ideascube/.kalite/content state=link

- name: Create tmp directory
  file: path=/media/hdd/bsfcampus/static/tmp state=directory mode=0755 owner={{ username }} group={{ username }}

- name: download library files
  get_url: url={{filer_bsf}}/kiwix_library.zip dest=/tmp/kiwix_library.zip

- name: unarchive the library package
  unarchive: src=/tmp/kiwix_library.zip dest=/media/hdd/ copy=no

- file: path=/var/lib/ansible/ state=absent

- command: /sbin/reboot
  when: st.stat.exists == False
