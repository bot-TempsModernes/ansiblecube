---
- include_vars: group_vars/{{ ansible_architecture }}.yml

- name: Test if package is already installed 
  shell: dpkg-query -W  ideascube  | awk '{print $2}' ; echo
  register: ideascube_version

- debug: msg="installed ideascube version {{ ideascube_version.stdout }}"

- name: Configure the ideascube package repository
  template: src=ideascube.list.j2 dest=/etc/apt/sources.list.d/ideascube.list owner=root group=root mode=644
  when: ideascube_version.stdout == ""



      #
      # UGLY HACK
      # The ideascube package is not signed (yet)
      # so we install dependencies first, then allow unauthenticated packages,
      # install ideascube, revert the security hole.

- name: Install ideascube dependencies
  apt: name=python3-minimal state=present
  when: ideascube_version.stdout == ""

- name: Allow unauthenticated packages
  lineinfile: dest=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY line='APT::Get::AllowUnauthenticated "true";' create=yes

- name: Install the ideascube package
  apt: name=ideascube state=latest update_cache=yes

- name: Remove the unauthenticated hack
  file: path=/etc/apt/apt.conf.d/9999IDEASCUBEISABADBADBOY state=absent

# Small hack in order to finalise the installation of Ideascube, We will have to remove it directly from the package
- name: Remove the STORAGE_ROOT from kb.py
  lineinfile: dest=/usr/share/python/ideascube/lib/python3.4/site-packages/ideascube/conf/kb.py regexp='STORAGE_ROOT' state=absent
  when: ideascube_version.stdout == "" and use_hdd|bool

# Add settings and conf

- name: Add a storage folder for Ideascube on the HDD
  file: path=/media/hdd/ideascube/ state=directory owner=ideascube group=ideascube mode=755
  when: ideascube_version.stdout == "" and use_hdd|bool

- name: Create a simlink to the HDD for the KoomBook
  file: src=/media/hdd/ideascube dest=/var/ideascube state=link
  when: ideascube_version.stdout == "" and use_hdd|bool

- name: Add IDEASCUBE_ID
  lineinfile: dest=/etc/default/ideascube
              regexp='^'
              line='IDEASCUBE_ID={{ ideascube_id }}'
              state=present
  when: ideascube_version.stdout == ""

- name: Remove linsting on 443 because the port is alredy used by sslh
  lineinfile: dest=/etc/nginx/sites-available/ideascube regexp='443' state=absent
  notify: restart nginx
  when: ideascube_version.stdout == ""

- name: Create simLink
  file: src=/etc/uwsgi/apps-available/ideascube.ini dest=/etc/uwsgi/apps-enabled/ideascube.ini state=link
  when: ideascube_version.stdout == ""

- name: Ideascube collectstatic to the hard drive
  become: yes
  become_user: ideascube
  shell: ideascube collectstatic --noinput
  when: use_hdd|bool == True and ideascube_version.stdout == ""

- name: Ideascube migrate data to the hard drive
  become: yes
  become_user: ideascube
  shell: ideascube migrate
  notify: restart uwsgi
  when: use_hdd|bool and ideascube_version.stdout == ""

- name: Download CSV to import
  get_url: url={{filer_bsf}}/KB_Liste_contenus_videos+fiches.csv dest=/media/hdd/IdeasServerContent/videos/KB_Liste_contenus_videos+fiches.csv
  when: ideascube_version.stdout == "" and import_ideascube_data|bool and use_hdd|bool

- name: Import data 
  become: yes
  become_user: ideascube
  shell: ideascube import_medias /media/hdd/IdeasServerContent/videos/KB_Liste_contenus_videos+fiches.csv
  when: ideascube_version.stdout == "" and import_ideascube_data|bool and use_hdd|bool


- name: Populate {{version}} if empty
  shell: dpkg-query -W  ideascube  | awk '{print $2}' ; echo
  register: ideascube_newversion
  when: version is not defined

- set_fact: version="{{ ideascube_newversion.stdout }}"
  when: version is not defined

- debug: msg="ideascube {{ version }} is now the current version."

- tasks:
  include: ../../../post_tasks.yml task=ideascube version={{ version }}
  when: ideascube_version.stdout < "{{ version }}"
